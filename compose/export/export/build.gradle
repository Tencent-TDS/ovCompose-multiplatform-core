/*
 * Tencent is pleased to support the open source community by making ovCompose available.
 * Copyright (C) 2025 THL A29 Limited, a Tencent company. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import androidx.build.AndroidXComposePlugin
import androidx.build.LibraryType

plugins {
    id("AndroidXPlugin")
    id("com.android.library")
    id("AndroidXComposePlugin")
    id("kotlinx-atomicfu")
}

AndroidXComposePlugin.applyAndConfigureKotlinPlugin(project)

if (AndroidXComposePlugin.isMultiplatformEnabled(project)) {
    androidXComposeMultiplatform {
        android()
        darwin()
        ohos()
    }

    kotlin {
        sourceSets {
            commonMain.dependencies {
                implementation(project(":compose:ui:ui"))
            }

            androidMain.dependsOn(commonMain)

            uikitMain.dependsOn(commonMain)

            ohosMain.dependsOn(commonMain)
            ohosArm64Main.dependsOn(ohosMain)

            configureEach {
                languageSettings.optIn("kotlinx.cinterop.ExperimentalForeignApi")
                languageSettings.optIn("kotlin.experimental.ExperimentalNativeApi")
                languageSettings.optIn("androidx.compose.ui.annotation.InternalComposeApi")
            }
        }
    }
}

androidx {
    name = "Compose UI primitives"
    type = LibraryType.PUBLISHED_LIBRARY
    inceptionYear = "2019"
    description = "Compose UI primitives. This library contains the primitives that form the Compose UI Toolkit, such as drawing, measurement and layout."
    legacyDisableKotlinStrictApiMode = true
}

android {
    testOptions.unitTests.includeAndroidResources = true
    buildTypes.all {
        consumerProguardFiles("proguard-rules.pro")
    }
}

// Screenshot tests related setup
android {
    sourceSets.androidTest.assets.srcDirs +=
            project.rootDir.absolutePath + "/golden/compose/ui/ui"
    namespace "androidx.compose.export"
    // namespace has to be unique, but default androidx.compose.ui.test package is taken by
    // the androidx.compose.ui:ui-test library
    testNamespace "androidx.compose.export.tests"
}

// Diagnostics for b/188565660
def verifyKotlinModule(String variant) {
    project.afterEvaluate {
        def capitalVariant = variant.capitalize()
        def moduleFile = new File("${buildDir}/tmp/kotlin-classes/${variant}/META-INF/ui_${variant}.kotlin_module")
        tasks.named("compile${capitalVariant}Kotlin").configure { t ->
            t.doLast {
                // This file should be large, about 3.2K. If this file is short then many symbols will fail to resolve
                if (moduleFile.length() < 250) {
                    throw new GradleException("kotlin_module file ($moduleFile) too short! See b/188565660 for more information. File text: ${moduleFile.text}")
                }
            }
        }
    }
}

if (!AndroidXComposePlugin.isMultiplatformEnabled(project)) {
    for (variant in ["debug", "release"]) {
        verifyKotlinModule(variant)
    }
}

project.tasks.configureEach {
    if (name == "compileJsWasmMainKotlinMetadata") {
        enabled = false
    }
}
