/*
 * Tencent is pleased to support the open source community by making ovCompose available.
 * Copyright (C) 2025 THL A29 Limited, a Tencent company. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { ArkUIViewController, InternalArkUIViewController } from 'libcompose_arkui_utils.so';
import { ArkUIRootView } from './ArkUIRootView';
import { RectShape } from '@kit.ArkUI';
import { ComposeSizeProxy } from './ComposeSizeProxy';
import { RotateScreenManager } from './RotateScreenManager';
import { MessengerImpl } from './messenger/Messenger';
import { TextToolbar, TextToolbarOverlay, TextToolbarParams } from './texttoolbar/TextToolbar';
import { ClipboardProxy } from './clipboard/ClipboardProxy';
import { common } from '@kit.AbilityKit';
import { KeyboardManager } from './keyboard/KeyboardManager';
import { BackHandler } from './backhandler/BackHandler';
import { DensityManager } from './density/DensityManager';
import { ComponentLifecycleImpl } from './lifecycle/ComponentLifecycle';
import { WindowStageManager } from './window/WindowStageManager';

let GeneratedIndex = 0;

function autoGeneratedComposeId(): string {
  return `Compose_${GeneratedIndex++}`
}

@Component
export struct Compose {
  public componentId: string = autoGeneratedComposeId()
  @Require public controller: ArkUIViewController | undefined = undefined
  @Require public libraryName: string | undefined = undefined
  public onBackPressed: (() => boolean) | undefined
  private touchableRootView = new ArkUIRootView();
  private foreRootView = new ArkUIRootView();
  private backRootView = new ArkUIRootView();
  @State private xComponentWidth: number = 0
  @State private xComponentHeight: number = 0
  @Prop private bgColor: string | undefined = undefined
  private refreshId: number | undefined = undefined
  private screenChangeManager = new RotateScreenManager()
  private messenger: MessengerImpl = new MessengerImpl();
  private lifecycle: ComponentLifecycleImpl = new ComponentLifecycleImpl()
  private textToolbar: TextToolbar | null = null
  private clipboardProxy: ClipboardProxy | null = null
  private keyboardManager: KeyboardManager | null = null
  private backHandler: BackHandler | null = null
  private composeSizeProxy: ComposeSizeProxy | null = null
  private densityMessenger: DensityManager | null = null
  private windowStateManager: WindowStageManager | null = null
  @State private textToolbarParams: TextToolbarParams = new TextToolbarParams()

  aboutToAppear(): void {
    this.requireController().init(this.componentId, this.backRootView, this.foreRootView, this.touchableRootView)
    this.initMessenger()
    this.requireController().initContext(getContext())
    this.requireController().initUIContext(this.getUIContext())
    this.requireController().aboutToAppear()
    this.registerComposeSizeChange()
    this.registerScreenChange()
    this.keyboardManager = new KeyboardManager(this.getUIAbilityContext(), this.requireController())
    this.keyboardManager.aboutToAppear()
    this.lifecycle.aboutToAppear()
  }

  registerComposeSizeChange() {
    let size = this.composeSizeProxy!!.getComposeSize();
    this.xComponentWidth = px2vp(size.width)
    this.xComponentHeight = px2vp(size.height)
    this.composeSizeProxy!!.registerSizeChange((width: number, height: number) => {
      this.xComponentWidth = px2vp(width)
      this.xComponentHeight = px2vp(height)
    })
  }

  registerScreenChange(): void {
    this.screenChangeManager.registerScreenChange(this, {
      onScreenChangeStart: (): void => {
        this.refreshId && this.requireController().cancelSyncRefresh(this.refreshId)
        this.refreshId = this.requireController().requestSyncRefresh()
      },
      onScreenChangeEnd: (): void => {
        this.refreshId && this.requireController().cancelSyncRefresh(this.refreshId)
        this.refreshId = undefined
      }
    })
  }

  aboutToDisappear(): void {
    this.requireController().aboutToDisappear()
    this.composeSizeProxy?.unregisterSizeChange()
    this.screenChangeManager.unregisterScreenChange(this)
    this.keyboardManager?.aboutToDisappear()
    this.lifecycle.aboutToDisappear()
  }

  initMessenger() {
    this.requireController().initMessenger(this.messenger)
    this.messenger.controller = this.requireController()
    this.textToolbar = new TextToolbar(
      this.messenger,
      (params) => {
        this.textToolbarParams.update(params)
      },
      () => {
        this.textToolbarParams.reset()
      })
    this.clipboardProxy = new ClipboardProxy(this.messenger)
    this.backHandler = new BackHandler(this.messenger, () => this.onBackPressed?.() ?? false)
    this.composeSizeProxy = new ComposeSizeProxy(this.messenger)
    this.densityMessenger = new DensityManager(this.messenger)
    this.windowStateManager = new WindowStageManager(this.getUIAbilityContext().windowStage, this.messenger, this.lifecycle)
  }

  build() {
    Stack() {
      // there are four layers in stack, consisting of one compose layer and three interop layers.
      // the stack and touchable interop container can receive touch event.
      Stack() {
        // 1.back interop container.
        NodeContainer(this.backRootView)
          .size({ width: "100%", height: "100%" })
          .clipShape(new RectShape({ width: this.xComponentWidth, height: this.xComponentHeight }))
        // 2.compose skia layer.
        XComponent({
          id: this.componentId,
          type: XComponentType.TEXTURE,
          libraryname: this.requireLibraryName(),
        })
          .backgroundColor('#00000000')
          .size({ width: '100%', height: '100%' })
          .renderFit(RenderFit.TOP_LEFT)

        // 3.fore interop container.
        NodeContainer(this.foreRootView).size({ width: '100%', height: '100%' })
        // 4.touchable interop container.
        NodeContainer(this.touchableRootView).size({ width: '100%', height: '100%' })
      }.backgroundColor(this.bgColor)
      .onTouch(e => {
        // Just dispatch to compose.
        this.requireController().dispatchTouchEvent(e, true)
      })

      TextToolbarOverlay({ params: this.textToolbarParams })
        .width("100%")
        .height("100%")
        .hitTestBehavior(HitTestMode.Transparent)
    }
  }

  private requireController(): InternalArkUIViewController {
    if (this.controller === undefined) {
      throw new Error("controller is undefined")
    } else {
      return this.controller as InternalArkUIViewController;
    }
  }

  private requireLibraryName(): string {
    if (this.libraryName === undefined) {
      throw new Error("controller is undefined")
    } else {
      return this.libraryName;
    }
  }

  private getUIAbilityContext(): common.UIAbilityContext {
    return getContext() as common.UIAbilityContext
  }
}