/*
 * Copyright (C) 2024 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import androidx.build.AndroidXComposePlugin
import androidx.build.JetbrainsAndroidXPlugin
import androidx.build.Publish
import org.jetbrains.kotlin.gradle.plugin.KotlinPlatformType

plugins {
    id("AndroidXPlugin")
    id("AndroidXComposePlugin")
    id("com.android.library")
    id("JetbrainsAndroidXPlugin")
}

AndroidXComposePlugin.applyAndConfigureKotlinPlugin(project)
JetbrainsAndroidXPlugin.applyAndConfigure(project)

androidXComposeMultiplatform {
    android()
    desktop()
    darwin()
    js()
    wasm()
}

kotlin {
    sourceSets {
        commonMain {
            dependencies {
                implementation(libs.kotlinStdlib)
                implementation(libs.kotlinCoroutinesCore)
                implementation(project(":annotation:annotation"))
                implementation(project(":compose:runtime:runtime"))
                implementation(project(":compose:ui:ui-util"))
                implementation(project(":lifecycle:lifecycle-runtime-compose"))
            }
        }

        jvmMain.dependsOn(commonMain)

        desktopMain.dependsOn(jvmMain)
        androidMain {
            dependsOn(jvmMain)
            dependencies {
                api("androidx.activity:activity-compose:1.8.0")
            }
        }

        jbMain.dependsOn(commonMain)
        desktopMain.dependsOn(jbMain)
        nonJvmMain.dependsOn(jbMain)
        nativeMain.dependsOn(nonJvmMain)
        webMain.dependsOn(nonJvmMain)

        targets.all { target ->
            if (target.platformType == KotlinPlatformType.native) {
                target.compilations["main"].defaultSourceSet {
                    dependsOn(nativeMain)
                }
            } else if (target.platformType in [
                    KotlinPlatformType.js,
                    KotlinPlatformType.wasm
            ]) {
                target.compilations["main"].defaultSourceSet {
                    dependsOn(webMain)
                }
            }
        }
    }
}

android {
    namespace "androidx.compose.ui.backhandler"
}

androidx {
    name = "Compose Multiplatform BackHandler"
    publish = Publish.SNAPSHOT_AND_RELEASE
    inceptionYear = "2025"
    description = "Provides BackHandler in Compose Multiplatform projects"
}
