// Signature format: 4.0
package androidx.appfunctions {

  @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.SOURCE) @kotlin.annotation.Target(allowedTargets=kotlin.annotation.AnnotationTarget.FUNCTION) public @interface AppFunction {
    method public abstract boolean isEnabled() default true;
    property public abstract boolean isEnabled;
  }

  public final class AppFunctionConfiguration {
    method public java.util.Map<java.lang.Class<? extends java.lang.Object?>,kotlin.jvm.functions.Function0<java.lang.Object>> getEnclosingClassFactories();
    property public java.util.Map<java.lang.Class<? extends java.lang.Object?>,kotlin.jvm.functions.Function0<java.lang.Object>> enclosingClassFactories;
  }

  public static final class AppFunctionConfiguration.Builder {
    ctor public AppFunctionConfiguration.Builder();
    method public <T> androidx.appfunctions.AppFunctionConfiguration.Builder addEnclosingClassFactory(Class<T> enclosingClass, kotlin.jvm.functions.Function0<? extends T> factory);
    method public androidx.appfunctions.AppFunctionConfiguration build();
  }

  public static interface AppFunctionConfiguration.Provider {
    method public androidx.appfunctions.AppFunctionConfiguration getAppFunctionConfiguration();
    property public abstract androidx.appfunctions.AppFunctionConfiguration appFunctionConfiguration;
  }

  @RequiresApi(android.os.Build.VERSION_CODES.TIRAMISU) public final class AppFunctionManagerCompat {
    ctor public AppFunctionManagerCompat(android.content.Context context);
    method @RequiresPermission(value="android.permission.EXECUTE_APP_FUNCTIONS", conditional=true) public suspend Object? isAppFunctionEnabled(String packageName, String functionId, kotlin.coroutines.Continuation<? super java.lang.Boolean>);
    method public suspend Object? isAppFunctionEnabled(String functionId, kotlin.coroutines.Continuation<? super java.lang.Boolean>);
    method public boolean isSupported();
    method @RequiresPermission(value="android.permission.EXECUTE_APP_FUNCTIONS", conditional=true) public suspend Object? setAppFunctionEnabled(String functionId, int newEnabledState, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    field public static final int APP_FUNCTION_STATE_DEFAULT = 0; // 0x0
    field public static final int APP_FUNCTION_STATE_DISABLED = 2; // 0x2
    field public static final int APP_FUNCTION_STATE_ENABLED = 1; // 0x1
    field public static final androidx.appfunctions.AppFunctionManagerCompat.Companion Companion;
  }

  public static final class AppFunctionManagerCompat.Companion {
    property public static int APP_FUNCTION_STATE_DEFAULT;
    property public static int APP_FUNCTION_STATE_DISABLED;
    property public static int APP_FUNCTION_STATE_ENABLED;
  }

}

