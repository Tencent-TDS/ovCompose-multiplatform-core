/*
 * Copyright (C) 2016 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This file was created using the `create_project.py` script located in the
 * `<AndroidX root>/development/project-creator` directory.
 *
 * Please use that script when creating a new project, rather than copying an existing project and
 * modifying its settings.
 */

import androidx.build.JetbrainsAndroidXPlugin
import androidx.build.PlatformIdentifier
import androidx.build.Publish
import org.jetbrains.kotlin.gradle.plugin.KotlinPlatformType

plugins {
    id("AndroidXPlugin")
    id("com.android.library")
    alias(libs.plugins.kotlinSerialization)
    id("JetbrainsAndroidXPlugin")
}

JetbrainsAndroidXPlugin.applyAndConfigure(project)

androidXMultiplatform {
    android()
    desktop()
    mac()
    linux()
    ios()
    js()
    wasm()

    defaultPlatform(PlatformIdentifier.ANDROID)

    sourceSets {
        commonMain {
            dependencies {
                api "androidx.annotation:annotation:1.9.1"
                api "androidx.collection:collection:1.5.0-beta01"
                api project(":lifecycle:lifecycle-common")
                api project(":lifecycle:lifecycle-runtime")
                api project(":lifecycle:lifecycle-viewmodel")
                api project(":lifecycle:lifecycle-viewmodel-savedstate")
                api project(":savedstate:savedstate")
                api project(":navigation:navigation-common")

                api(libs.kotlinStdlib)
                implementation(libs.kotlinSerializationCore)
            }
        }

        commonTest {
            dependencies {
                implementation(libs.kotlinStdlib)
                implementation(libs.kotlinTest)
                implementation(libs.kotlinCoroutinesTest)
                implementation(project(":kruth:kruth"))
                implementation(project(":navigation:navigation-testing"))
                implementation(project(":internal-testutils-navigation"))
            }
        }

        jvmMain.dependsOn(commonMain)
        jvmTest.dependsOn(commonTest)

        androidMain {
            dependsOn(jvmMain)
            dependencies {
                api("androidx.activity:activity-ktx:1.7.1")
            }
        }

        androidInstrumentedTest {
            dependsOn(commonTest)
            dependencies {
                implementation(project(":internal-testutils-runtime"))
                implementation(libs.testExtJunit)
                implementation(libs.testExtTruth)
                implementation(libs.testCore)
                implementation(libs.testRunner)
                implementation(libs.testRules)
                implementation(libs.espressoCore)
                implementation(libs.espressoIntents)

                // CustomMessageMissingMethodException: Could not find method implementation() for arguments
                // implementation(libs.mockitoCore, excludes.bytebuddy)
                // implementation(libs.dexmakerMockito, excludes.bytebuddy)
                implementation("org.mockito:mockito-core:2.25.0", excludes.bytebuddy)
                implementation("com.linkedin.dexmaker:dexmaker-mockito:2.28.3", excludes.bytebuddy)
            }
        }

        jbMain.dependsOn(commonMain)
        jbTest.dependsOn(commonTest)

        nonJvmMain {
            dependsOn(jbMain)
            dependencies {
                implementation(libs.atomicFu)
            }
        }
        nonJvmTest.dependsOn(jbTest)

        desktopMain {
            dependsOn(jvmMain)
            dependsOn(jbMain)
        }
        desktopTest {
            dependsOn(jvmTest)
            dependsOn(jbTest)
        }

        nativeMain.dependsOn(nonJvmMain)
        nativeTest.dependsOn(nonJvmTest)

        webMain.dependsOn(nonJvmMain)
        webTest.dependsOn(nonJvmTest)

        targets.all { target ->
            if (target.platformType == KotlinPlatformType.native) {
                target.compilations["main"].defaultSourceSet.dependsOn(nativeMain)
                target.compilations["test"].defaultSourceSet.dependsOn(nativeTest)
            } else if (target.platformType in [KotlinPlatformType.js, KotlinPlatformType.wasm]) {
                target.compilations["main"].defaultSourceSet.dependsOn(webMain)
                target.compilations["test"].defaultSourceSet.dependsOn(webTest)
            }
        }

        wasmJsMain.dependencies {
            implementation(libs.kotlinXw3c)
        }

        wasmJsTest.kotlin.srcDirs("src/jsTest/kotlin")
    }
}

kotlin {
    watchosArm64()
    watchosArm32()
    watchosX64()
    watchosSimulatorArm64()
    tvosArm64()
    tvosX64()
    tvosSimulatorArm64()
}

android {
    // Include `*.java` files into the build
    sourceSets["main"].java.srcDir("src/androidMain/java")
    namespace "androidx.navigation"
}

androidx {
    name = "Navigation Runtime"
    publish = Publish.SNAPSHOT_AND_RELEASE
    inceptionYear = "2017"
    description = "Android Navigation-Runtime"
    metalavaK2UastEnabled = true
    legacyDisableKotlinStrictApiMode = true
}
