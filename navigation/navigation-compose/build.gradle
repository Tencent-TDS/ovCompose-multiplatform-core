/*
 * Copyright 2020 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import androidx.build.SoftwareType
import androidx.build.PlatformIdentifier
import org.jetbrains.kotlin.gradle.plugin.KotlinPlatformType
import org.jetbrains.kotlin.konan.target.Family

plugins {
    id("AndroidXPlugin")
    id("com.android.library")
    id("AndroidXComposePlugin")
    alias(libs.plugins.kotlinSerialization)
}

androidXMultiplatform {
    androidTarget()
    desktop()
    mac()
    ios()
    js()
    wasmJs()

    defaultPlatform(PlatformIdentifier.ANDROID)

    sourceSets {
        commonMain {
            dependencies {
                api(libs.kotlinStdlib)
                api(project(":compose:animation:animation"))
                api(project(":compose:ui:ui"))
                api(project(":compose:runtime:runtime-saveable"))
                api(project(":compose:runtime:runtime"))
                api(project(":lifecycle:lifecycle-viewmodel-compose"))
                api(project(":navigation:navigation-common"))
                api(project(":navigation:navigation-runtime"))
                implementation("androidx.annotation:annotation:1.9.1")
                implementation("androidx.collection:collection:1.5.0")
                implementation(project(":lifecycle:lifecycle-common"))
                implementation(project(":lifecycle:lifecycle-runtime"))
                implementation(project(":lifecycle:lifecycle-runtime-compose"))
                implementation(project(":lifecycle:lifecycle-viewmodel"))
                implementation(project(":lifecycle:lifecycle-viewmodel-savedstate"))
                implementation(project(":savedstate:savedstate"))
                implementation(project(":savedstate:savedstate-compose"))
                implementation(libs.kotlinCoroutinesCore)
                implementation(libs.kotlinSerializationCore)
            }
        }

        commonTest {
            dependencies {
                implementation(libs.kotlinTest)
                implementation(libs.kotlinCoroutinesTest)
                implementation(project(":kruth:kruth"))
                implementation(project(":compose:material:material"))
                implementation(project(":compose:ui:ui-test"))
                implementation(project(":navigation:navigation-testing"))
                implementation(project(":internal-testutils-navigation"))
            }
        }

        jvmMain {
            dependsOn(commonMain)
        }

        jvmTest {
            dependsOn(commonTest)
        }

        androidMain {
            dependsOn(jvmMain)
            dependencies {
                api("androidx.activity:activity-compose:1.8.0")
                implementation("androidx.activity:activity:1.8.0")
            }
        }

        androidUnitTest {
            dependsOn(jvmTest)
        }

        androidInstrumentedTest {
            dependsOn(jvmTest)
            dependencies {
                implementation("androidx.activity:activity:1.9.2")
                implementation("androidx.core:core-ktx:1.13.0")
                implementation("androidx.lifecycle:lifecycle-runtime-testing:2.8.2")
                implementation("androidx.lifecycle:lifecycle-runtime:2.8.2")
                implementation("androidx.lifecycle:lifecycle-common:2.8.2")
                implementation("androidx.lifecycle:lifecycle-viewmodel:2.8.2")
                implementation("androidx.lifecycle:lifecycle-viewmodel-savedstate:2.8.2")
                implementation("androidx.savedstate:savedstate:1.2.1")
                implementation(project(":navigation:navigation-testing"))
                implementation(libs.testExtJunit)
                implementation(libs.testRunner)
                implementation(libs.junit)
                implementation(libs.truth)

                // Compose test dependencies
                implementation(project(":compose:animation:animation"))
                implementation(project(":compose:animation:animation-core"))
                implementation(project(":compose:foundation:foundation"))
                implementation(project(":compose:runtime:runtime"))
                implementation(project(":compose:runtime:runtime-saveable"))
                implementation(project(":compose:ui:ui"))
                implementation(project(":compose:ui:ui-graphics"))
                implementation(project(":compose:ui:ui-test"))
                implementation(project(":compose:ui:ui-text"))
                implementation(project(":compose:ui:ui-tooling-preview"))
                implementation(project(":compose:ui:ui-unit"))
                implementation(project(":compose:material:material"))
                implementation(project(":compose:test-utils"))
                implementation(project(":compose:ui:ui-test-junit4"))
                implementation(project(":compose:ui:ui-tooling"))
            }
        }

        nonAndroidMain {
            dependsOn(commonMain)
            dependencies {
                implementation(project(":compose:ui:ui-backhandler"))
            }
        }

        nonAndroidTest {
            dependsOn(commonTest)
        }

        desktopMain {
            dependsOn(jvmMain)
            dependsOn(nonAndroidMain)
        }

        desktopTest {
            dependsOn(jvmTest)
            dependsOn(nonAndroidTest)
            dependencies {
                implementation(libs.skikoCurrentOs)
                implementation(libs.kotlinCoroutinesSwing)
            }
        }

        nonJvmMain {
            dependsOn(nonAndroidMain)
        }

        nonJvmTest {
            dependsOn(nonAndroidTest)
        }

        nativeMain {
            dependsOn(nonJvmMain)
        }

        nativeTest {
            dependsOn(nonJvmTest)
        }

        darwinMain {
            dependsOn(nativeMain)
        }

        darwinTest {
            dependsOn(nativeTest)
        }

        macosMain {
            dependsOn(darwinMain)
        }

        macosTest {
            dependsOn(darwinTest)
        }

        uikitMain {
            dependsOn(darwinMain)
        }

        uikitTest {
            dependsOn(darwinTest)
        }

        webMain {
            dependsOn(nonJvmMain)
        }

        webTest {
            dependsOn(nonJvmTest)
        }

        targets.configureEach { target ->
            if (target.platformType == KotlinPlatformType.native) {
                if (target.konanTarget.family == Family.IOS) {
                    target.compilations["main"].defaultSourceSet.dependsOn(uikitMain)
                    target.compilations["test"].defaultSourceSet.dependsOn(uikitTest)
                } else if (target.konanTarget.family == Family.OSX) {
                    target.compilations["main"].defaultSourceSet.dependsOn(macosMain)
                    target.compilations["test"].defaultSourceSet.dependsOn(macosTest)
                } else if (target.konanTarget.family.appleFamily) {
                    target.compilations["main"].defaultSourceSet.dependsOn(darwinMain)
                    target.compilations["test"].defaultSourceSet.dependsOn(darwinTest)
                } else {
                    target.compilations["main"].defaultSourceSet.dependsOn(nativeMain)
                    target.compilations["test"].defaultSourceSet.dependsOn(nativeTest)
                }
            } else if (target.platformType in [KotlinPlatformType.js, KotlinPlatformType.wasm]) {
                target.compilations["main"].defaultSourceSet.dependsOn(webMain)
                target.compilations["test"].defaultSourceSet.dependsOn(webTest)
            }
        }
    }
}

dependencies {
    lintChecks(project(":navigation:navigation-compose-lint"))
    lintPublish(project(":navigation:navigation-compose-lint"))
}

androidx {
    name = "Compose Navigation"
    type = SoftwareType.PUBLISHED_LIBRARY_ONLY_USED_BY_KOTLIN_CONSUMERS
    inceptionYear = "2020"
    description = "Compose integration with Navigation"
    samples(project(":navigation:navigation-compose:navigation-compose-samples"))
    metalavaK2UastEnabled = false
    addGoldenImageAssets()
}

android {
    compileSdk = 35
    namespace = "androidx.navigation.compose"
}
