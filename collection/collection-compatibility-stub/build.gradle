/*
 * Copyright 2018 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



import androidx.build.AndroidXComposePlugin
import androidx.build.JetbrainsAndroidXPlugin
import androidx.build.LibraryType

plugins {
    id("AndroidXPlugin")

    //  TODO move all functionality to Compose-independent plugin (`collection` shouldn't depend on Compose concepts)
    id("AndroidXComposePlugin")
    id("JetbrainsAndroidXPlugin")
}

AndroidXComposePlugin.applyAndConfigureKotlinPlugin(project)
JetbrainsAndroidXPlugin.applyAndConfigure(project)

androidXComposeMultiplatform {
    js()
    wasm()
    darwin()

    linuxX64()
    linuxArm64()
}

kotlin {
    jvm {
        withJava()
    }
    // Not all modules can have these targets, so declare them here instead of androidXComposeMultiplatform.
    // We can support the kotlin-native targets supported by kotlin coroutines:
    // https://github.com/Kotlin/kotlinx.coroutines/blob/master/gradle/compile-native-multiplatform.gradle
    // NOTE: Keep this list in sync with runtime-saveable's targets.
    watchosArm64()
    watchosArm32()
    watchosX64()
    watchosSimulatorArm64()
    tvosArm64()
    tvosX64()
    tvosSimulatorArm64()
    mingwX64()

    sourceSets {
        all {
            languageSettings.optIn("kotlin.RequiresOptIn")
            languageSettings.optIn("kotlin.contracts.ExperimentalContracts")
        }

        commonMain {
            dependencies {
                api(libs.kotlinStdlib)
                api("androidx.collection:collection:1.5.0-beta02")
            }
        }

        commonTest {
            dependencies {
                implementation(libs.kotlinTest)
                implementation(libs.kotlinTestAnnotationsCommon)
                implementation(libs.kotlinCoroutinesCore)
            }
        }

        jvmTest {
            dependencies {
                implementation(libs.kotlinTestJunit)
                implementation(libs.truth)
                implementation(project(":internal-testutils-truth"))
            }
        }

        jbMain.dependsOn(commonMain)
        jvmMain.dependsOn(jbMain)
        nonJvmMain.dependsOn(jbMain)
        jsWasmMain.dependsOn(nonJvmMain)
        jsMain.dependsOn(jsWasmMain)

        wasmJsMain.dependsOn(jsWasmMain)

        nativeMain.dependsOn(nonJvmMain)
        linuxArm64Main.dependsOn(nativeMain)
        linuxArm64Test.dependsOn(nativeTest)
        linuxX64Main.dependsOn(nativeMain)
        linuxX64Test.dependsOn(nativeTest)
        mingwX64Main.dependsOn(nativeMain)
        mingwX64Test.dependsOn(nativeTest)

        def darwinMain = sourceSets.getByName("darwinMain")
        def darwinTest = sourceSets.getByName("darwinTest")
        def watchOsMain = sourceSets.create("watchOsMain")
        def watchOsTest = sourceSets.create("watchOsTest")
        watchOsMain.dependsOn(darwinMain)
        watchOsTest.dependsOn(darwinTest)
        watchosArm64Main.dependsOn(watchOsMain)
        watchosArm64Test.dependsOn(watchOsTest)
        watchosArm32Main.dependsOn(watchOsMain)
        watchosArm32Test.dependsOn(watchOsTest)
        watchosX64Main.dependsOn(watchOsMain)
        watchosX64Test.dependsOn(watchOsTest)
        watchosSimulatorArm64Main.dependsOn(watchOsMain)
        watchosSimulatorArm64Test.dependsOn(watchOsTest)

        def tvOsMain = sourceSets.create("tvOsMain")
        def tvOsTest = sourceSets.create("tvOsTest")
        tvOsMain.dependsOn(darwinMain)
        tvOsTest.dependsOn(darwinTest)

        tvosArm64Main.dependsOn(tvOsMain)
        tvosArm64Test.dependsOn(tvOsTest)
        tvosX64Main.dependsOn(tvOsMain)
        tvosX64Test.dependsOn(tvOsTest)
        tvosSimulatorArm64Main.dependsOn(tvOsMain)
        tvosSimulatorArm64Test.dependsOn(tvOsTest)

        def commonNonWebTest = sourceSets.create("commonNonWebTest")
        commonNonWebTest.dependsOn(commonTest)
        commonNonWebTest.dependencies {
            implementation(libs.kotlinTest)
            implementation(libs.kotlinTestAnnotationsCommon)
            implementation(libs.kotlinCoroutinesCore)
        }
        nativeTest.dependsOn(commonNonWebTest)
        jvmTest.dependsOn(commonNonWebTest)

        def webTest = sourceSets.create("webTest")
        webTest.dependsOn(commonTest)
        jsTest.dependsOn(webTest)
        wasmJsTest.dependsOn(webTest)
    }
}

dependencies {
    // Required for users who only depend on this artifact, but pull an older version of
    // collection-ktx transitively, which would lead to duplicate definition since the -ktx
    // extensions were moved into the main artifact.
    constraints {
        jvmMainImplementation("androidx.collection:collection-ktx:1.3.0-alpha01")
    }
}

androidx {
    name = "collections"
    type = LibraryType.PUBLISHED_LIBRARY
    inceptionYear = "2018"
    description = "Standalone efficient collections."
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

androidxCompose {
    composeCompilerPluginEnabled = false
}

project.tasks.withType(org.jetbrains.kotlin.gradle.dsl.KotlinJsCompile) { task ->
    if (task.name.toLowerCase().contains("test")) {
        // It's needed for tests only: https://youtrack.jetbrains.com/issue/KT-59081
        kotlinOptions.freeCompilerArgs += "-Xwasm-enable-array-range-checks"
    }
}